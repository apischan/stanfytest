/**
 * This class is generated by jOOQ
 */
package com.apischan.stanfytest.jooq.tables;


import com.apischan.stanfytest.jooq.Keys;
import com.apischan.stanfytest.jooq.Public;
import com.apischan.stanfytest.jooq.tables.records.SkillRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Skill extends TableImpl<SkillRecord> {

    private static final long serialVersionUID = -1207270954;

    /**
     * The reference instance of <code>public.skill</code>
     */
    public static final Skill SKILL = new Skill();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillRecord> getRecordType() {
        return SkillRecord.class;
    }

    /**
     * The column <code>public.skill.id</code>.
     */
    public final TableField<SkillRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('skill_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.skill.name</code>.
     */
    public final TableField<SkillRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>public.skill</code> table reference
     */
    public Skill() {
        this("skill", null);
    }

    /**
     * Create an aliased <code>public.skill</code> table reference
     */
    public Skill(String alias) {
        this(alias, SKILL);
    }

    private Skill(String alias, Table<SkillRecord> aliased) {
        this(alias, aliased, null);
    }

    private Skill(String alias, Table<SkillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SkillRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SKILL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Skill as(String alias) {
        return new Skill(alias, this);
    }

    /**
     * Rename this table
     */
    public Skill rename(String name) {
        return new Skill(name, null);
    }
}
